<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AnonyChat Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* --- Font & Scrollbar --- */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
        body { font-family: 'Inter', sans-serif; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1e293b; }
        ::-webkit-scrollbar-thumb { background: #4f46e5; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #6366f1; }

        /* --- Custom Animations --- */
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        @keyframes slideInUp { from { transform: translateY(20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
        @keyframes pulseGlow { 0%, 100% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.7); } 50% { box-shadow: 0 0 0 10px rgba(34, 197, 94, 0); } }
        .animate-fade-in { animation: fadeIn 0.5s ease-out forwards; }
        .animate-slide-in-up { animation: slideInUp 0.6s ease-out forwards; }
        .status-dot.bg-green-500 { animation: pulseGlow 2s infinite; }
        
        /* --- Modal Animation --- */
        #chat-modal.hidden .modal-content { transform: scale(0.95); opacity: 0; }
        .modal-content { transition: all 0.2s ease-out; }

        /* --- Responsive Table --- */
        @media (max-width: 768px) {
            .responsive-table thead { display: none; }
            .responsive-table tbody, .responsive-table tr, .responsive-table td { display: block; width: 100%; }
            .responsive-table tr { margin-bottom: 1rem; border: 1px solid #334155; border-radius: 0.75rem; overflow: hidden; }
            .responsive-table td { display: flex; justify-content: space-between; align-items: center; text-align: right; padding: 0.75rem 1rem; border-bottom: 1px solid #334155; }
            .responsive-table td:last-child { border-bottom: none; }
            .responsive-table td::before { content: attr(data-label); font-weight: 600; text-align: left; margin-right: 1rem; color: #cbd5e1; }
        }
    </style>
</head>
<body class="bg-slate-900 text-slate-300">
    <div class="container mx-auto p-4 md:p-8">
        <header class="flex flex-wrap justify-between items-center mb-8 gap-4 animate-fade-in">
            <div>
                <h1 class="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-indigo-500">AnonyChat Dashboard</h1>
                <p class="text-slate-400 mt-1">Panel Kontrol Bot Anda</p>
            </div>
            <div class="text-sm text-slate-500" id="status-text">Menunggu update...</div>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8 animate-slide-in-up" style="animation-delay: 100ms;">
            <div class="lg:col-span-1 space-y-8">
                <div class="p-6 bg-slate-800/50 border border-slate-700 rounded-2xl transition-all duration-300 hover:border-indigo-500/80">
                    <h2 class="text-xl font-bold mb-4 border-b border-slate-700 pb-3 text-slate-100">ðŸš¦ Status Bot</h2>
                    <div class="flex items-center space-x-3 my-4">
                        <span id="status-dot" class="status-dot h-3 w-3 rounded-full bg-gray-500"></span>
                        <span id="status-label" class="font-semibold text-lg text-slate-100">Inisialisasi...</span>
                    </div>
                </div>

                <div class="p-6 bg-slate-800/50 border border-slate-700 rounded-2xl transition-all duration-300 hover:border-indigo-500/80">
                    <h2 class="text-xl font-bold mb-4 border-b border-slate-700 pb-3 text-slate-100">ðŸ“£ Kirim Broadcast</h2>
                    <form id="broadcast-form" class="space-y-4">
                        <textarea id="broadcast-message" name="message" rows="4" class="w-full bg-slate-900/50 border border-slate-600 rounded-lg p-3 text-slate-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition" placeholder="Ketik pesan broadcast Anda di sini..."></textarea>
                        <button type="submit" id="send-broadcast-btn" class="w-full flex items-center justify-center gap-2 bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-indigo-700 active:bg-indigo-800 transition-colors duration-300 disabled:bg-slate-600 disabled:cursor-not-allowed">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.428A1 1 0 009.894 15V4.106A1 1 0 0010.894 2.553z" /><path d="M10.106 4.106V15a1 1 0 00.787.97l5 1.428a1 1 0 001.17-1.408l-7-14a1 1 0 00-1.652.114z" /></svg>
                            Kirim ke Semua User
                        </button>
                        <p id="broadcast-status" class="text-center text-sm text-slate-400 h-4 transition-all"></p>
                    </form>
                </div>
                
                <div id="qr-code-container" class="text-center p-6 bg-slate-800/50 border-2 border-dashed border-slate-600 rounded-2xl hidden transition-all duration-300">
                    <p class="mb-3 font-semibold text-slate-200">Silakan Scan QR Code untuk Login</p>
                    <img id="qr-code-image" src="" alt="QR Code" class="mx-auto w-full max-w-xs rounded-lg">
                </div>
            </div>
            <div id="anon-status-section" class="lg:col-span-2 p-6 bg-slate-800/50 border border-slate-700 rounded-2xl transition-all duration-300 hover:border-indigo-500/80">
                </div>
        </div>
        
        <div class="animate-slide-in-up" style="animation-delay: 200ms;">
            <div class="mb-4 border-b border-slate-700">
                <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                    <button onclick="changeTab('users')" class="tab-button border-indigo-500 text-indigo-400 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300">Manajemen User</button>
                    <button onclick="changeTab('violations')" class="tab-button border-transparent text-slate-400 hover:text-indigo-400 hover:border-gray-500 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300">Log Pelanggaran</button>
                    <button onclick="changeTab('logs')" class="tab-button border-transparent text-slate-400 hover:text-indigo-400 hover:border-gray-500 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300">Aktivitas Bot</button>
                </nav>
            </div>
            <div id="users-content" class="tab-content bg-slate-800/50 border border-slate-700 rounded-2xl overflow-hidden"></div>
            <div id="violations-content" class="tab-content bg-slate-800/50 border border-slate-700 rounded-2xl overflow-hidden hidden"></div>
            <div id="logs-content" class="tab-content bg-slate-900/80 border border-slate-700 text-white font-mono text-xs rounded-2xl hidden"></div>
        </div>
    </div>

    <div id="chat-modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center hidden z-50 p-4 backdrop-blur-sm">
        <div class="bg-slate-800 border border-slate-700 rounded-lg shadow-xl w-full sm:w-11/12 md:w-1/2 max-h-[80vh] flex flex-col modal-content">
            <div class="p-4 border-b border-slate-700 flex justify-between items-center">
                <h2 class="text-xl font-bold text-slate-100" id="modal-room-id"></h2>
                <button onclick="closeModal()" class="text-slate-400 hover:text-white text-3xl transition-colors duration-300">&times;</button>
            </div>
            <div class="p-4 overflow-y-auto" id="modal-chat-content"></div>
        </div>
    </div>

    <script>
        // --- SCRIPT LAMA ANDA ---
        const updateInterval = 5000;
        let cachedData = {};

        function changeTab(tabName) {
            ['users', 'violations', 'logs'].forEach(tab => {
                document.getElementById(`${tab}-content`).classList.add('hidden');
                const button = document.querySelector(`button[onclick="changeTab('${tab}')"]`);
                button.classList.remove('border-indigo-500', 'text-indigo-400');
                button.classList.add('border-transparent', 'text-slate-400');
            });
            document.getElementById(`${tabName}-content`).classList.remove('hidden');
            const button = document.querySelector(`button[onclick="changeTab('${tabName}')"]`);
            button.classList.add('border-indigo-500', 'text-indigo-400');
            button.classList.remove('border-transparent', 'text-slate-400');
        }

        function renderBotStatus(status, qrCode) {
            const dot = document.getElementById('status-dot');
            const label = document.getElementById('status-label');
            const qrContainer = document.getElementById('qr-code-container');
            const qrImage = document.getElementById('qr-code-image');
            dot.className = 'status-dot h-3 w-3 rounded-full'; // Reset classes
            if (status === 'CONNECTED') { dot.classList.add('bg-green-500'); label.textContent = 'Terhubung'; qrContainer.classList.add('hidden');
            } else if (status === 'WAITING_FOR_QR_SCAN') { dot.classList.add('bg-yellow-500'); label.textContent = 'Menunggu Scan QR...'; if (qrCode) { qrImage.src = qrCode; qrContainer.classList.remove('hidden'); }
            } else if (status === 'DISCONNECTED') { dot.classList.add('bg-red-500'); label.textContent = 'Terputus'; qrContainer.classList.add('hidden');
            } else { dot.classList.add('bg-gray-500'); label.textContent = 'Inisialisasi...'; qrContainer.classList.add('hidden'); }
        }

        function renderServerLogs(logs) {
            const container = document.getElementById('logs-content');
            let logHTML = `<div class="p-4 h-96 overflow-y-auto">`;
            logs.slice().reverse().forEach(log => { logHTML += `<div><span class="text-indigo-400">${log.timestamp}:</span><span class="text-slate-300"> ${log.message}</span></div>`; });
            logHTML += `</div>`;
            container.innerHTML = logHTML;
        }

        function renderAnonStatus(data) {
            const container = document.getElementById('anon-status-section');
            let statusHTML = `<h2 class="text-xl font-bold mb-4 border-b border-slate-700 pb-3 text-slate-100">ðŸ’ž Status Anonymous Chat</h2>
            <div class="grid md:grid-cols-2 gap-6 mt-4">
                <div>
                    <h3 class="font-bold mb-2 text-slate-200">ðŸ‘¥ Menunggu Partner (${data.waiting.length})</h3>
                    <div class="text-slate-300 h-32 overflow-y-auto bg-slate-900/50 p-3 rounded-lg border border-slate-700">${data.waiting.length > 0 ? data.waiting.map(u => `<div>- ${u.nickname}</div>`).join('') : '<div class="text-slate-500">Tidak ada yang menunggu...</div>'}</div>
                </div>
                <div>
                    <h3 class="font-bold mb-2 text-slate-200">ðŸ’¬ Room Aktif (${data.active.length})</h3>
                    <div class="text-slate-300 h-32 overflow-y-auto bg-slate-900/50 p-3 rounded-lg border border-slate-700">${data.active.length > 0 ? data.active.map(p => `<div>- <a href="#" onclick="showChatLog('${p.roomId}')" class="text-indigo-400 hover:underline font-semibold">${p.roomId}</a>: ${p.user1} â†” ${p.user2}</div>`).join('') : '<div class="text-slate-500">Tidak ada yang aktif...</div>'}</div>
                </div>
            </div>`;
            container.innerHTML = statusHTML;
        }

        function renderUserTable(users) {
            const container = document.getElementById('users-content');
            let tableHTML = `<div class="overflow-x-auto"><table class="w-full text-sm text-left text-slate-400 responsive-table"><thead class="bg-slate-800 text-xs uppercase text-slate-400"><tr><th class="px-6 py-3">Nickname</th><th class="px-6 py-3">Status</th><th class="px-6 py-3 text-center">Aksi</th></tr></thead><tbody>`;
            users.forEach(user => {
                const isBannedClass = user.isBanned ? 'bg-rose-500/10' : '';
                const statusBadge = user.isBanned ? `<span class="px-2 py-1 text-xs font-semibold text-white bg-rose-500/80 rounded-full">Banned</span>` : `<span class="px-2 py-1 text-xs font-semibold text-white bg-teal-500/80 rounded-full">Aktif</span>`;
                const banButton = user.isBanned 
                    ? `<button type="submit" class="p-2 bg-sky-500/20 text-sky-400 rounded-md hover:bg-sky-500/40 transition-colors" title="Unban User"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z" /><path fill-rule="evenodd" d="M.458 10C3.732 4.943 7.523 3 10 3s6.268 1.943 9.542 7c-3.274 5.057-7.03 7-9.542 7S3.732 15.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" /></svg></button>` 
                    : `<button type="submit" class="p-2 bg-rose-500/20 text-rose-400 rounded-md hover:bg-rose-500/40 transition-colors" title="Ban User"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M13.477 14.89A6 6 0 015.11 6.524l8.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z" clip-rule="evenodd" /></svg></button>`;
                tableHTML += `<tr class="border-b border-slate-700 hover:bg-slate-700/50 transition-colors ${isBannedClass}"><td data-label="Nickname" class="px-6 py-4 font-medium text-slate-200">${user.nickname}<span class="text-slate-500 text-xs block">${user.id.split('@')[0]}</span></td><td data-label="Status" class="px-6 py-4">${statusBadge}</td><td data-label="Aksi" class="px-6 py-4 flex items-center justify-end md:justify-center"><form action="/toggle-ban" method="POST" class="contents"><input type="hidden" name="userId" value="${user.id}">${banButton}</form></td></tr>`;
            });
            tableHTML += `</tbody></table></div>`;
            container.innerHTML = tableHTML;
        }

        function renderViolationTable(violations) {
            const container = document.getElementById('violations-content');
            let tableHTML = `<h2 class="text-xl font-bold p-4 border-b border-slate-700 text-slate-100">ðŸš« Log Pelanggaran</h2><div class="overflow-x-auto"><table class="w-full text-sm text-left text-slate-400 responsive-table"><thead class="bg-slate-800 text-xs uppercase text-slate-400"><tr><th class="px-6 py-3">Waktu</th><th class="px-6 py-3">Tipe</th><th class="px-6 py-3">Pelaku/Pelapor</th><th class="px-6 py-3">Detail</th></tr></thead><tbody>`;
            violations.slice().reverse().forEach((v, index) => {
                let reporterInfo = v.type === 'Laporan Pengguna' ? `<div class="font-bold text-rose-400">Pelapor: ${v.reporter.nickname}</div><div class="text-slate-400">Terlapor: ${v.reported.nickname}</div>` : `<div class="font-bold text-slate-200">${v.nickname}</div>`;
                let detailInfo = v.type === 'Laporan Pengguna' ? `<button onclick="showReportedChat(${violations.length - 1 - index})" class="text-indigo-400 hover:underline">Lihat Chat</button>` : `<span class="text-rose-400">${v.message}</span>`;
                tableHTML += `<tr class="border-b border-slate-700 hover:bg-slate-700/50 transition-colors"><td data-label="Waktu" class="px-6 py-4 text-slate-500 whitespace-nowrap">${v.timestamp}</td><td data-label="Tipe" class="px-6 py-4 font-semibold text-slate-200">${v.type}</td><td data-label="Pelaku/Pelapor" class="px-6 py-4">${reporterInfo}</td><td data-label="Detail" class="px-6 py-4">${detailInfo}</td></tr>`;
            });
            tableHTML += `</tbody></table></div>`;
            container.innerHTML = tableHTML;
        }
        
        const modal = document.getElementById('chat-modal');
        async function showChatLog(roomId) {
            document.getElementById('modal-room-id').textContent = `Isi Chat Room: ${roomId}`;
            const contentDiv = document.getElementById('modal-chat-content');
            contentDiv.innerHTML = 'Memuat chat...';
            modal.classList.remove('hidden');
            try {
                const response = await fetch(`/api/chatlog/${roomId}`);
                const logData = await response.json();
                let chatHTML = '<div class="space-y-3">';
                logData.forEach(chat => { chatHTML += `<div><span class="font-bold text-indigo-400">${chat.nickname}:</span> ${chat.message} <span class="text-xs text-slate-500 float-right">${chat.timestamp.split(' ')[1]}</span></div>`; });
                chatHTML += '</div>';
                contentDiv.innerHTML = chatHTML;
            } catch (error) { contentDiv.innerHTML = 'Gagal memuat log chat.'; }
        }

        function showReportedChat(violationIndex) {
            const violation = cachedData.violations.slice().reverse()[violationIndex];
            document.getElementById('modal-room-id').textContent = `Bukti Laporan Room: ${violation.roomId}`;
            const contentDiv = document.getElementById('modal-chat-content');
            let chatHTML = '<div class="space-y-3">';
            (violation.chatHistory || []).forEach(chat => {
                let colorClass = 'text-slate-300';
                if (violation.reporter && chat.userId === violation.reporter.id) colorClass = 'text-green-400';
                if (violation.reported && chat.userId === violation.reported.id) colorClass = 'text-rose-400';
                chatHTML += `<div><span class="font-bold ${colorClass}">${chat.nickname}:</span> ${chat.message}</div>`;
            });
            chatHTML += '</div>';
            contentDiv.innerHTML = chatHTML;
            modal.classList.remove('hidden');
        }

        function closeModal() { modal.classList.add('hidden'); }

        async function updateAllData() {
            try {
                const response = await fetch('/api/status');
                if (!response.ok) throw new Error('Gagal mengambil data dari server.');
                const data = await response.json();
                if (JSON.stringify(data) !== JSON.stringify(cachedData)) {
                    cachedData = data;
                    renderAnonStatus(data);
                    renderUserTable(data.users);
                    renderViolationTable(data.violations);
                }
                renderBotStatus(data.botStatus, data.qrCode);
                renderServerLogs(data.serverLogs);
                document.getElementById('status-text').textContent = `Data diperbarui pada: ${new Date().toLocaleTimeString('id-ID')}`;
            } catch (error) {
                console.error("Gagal update data:", error);
                document.getElementById('status-text').textContent = "Gagal memuat data.";
                renderBotStatus('DISCONNECTED', '');
            }
        };
        
        document.addEventListener('DOMContentLoaded', () => {
            // Update data rutin
            updateAllData();
            setInterval(updateAllData, updateInterval);

            // --- SCRIPT BARU UNTUK FITUR BROADCAST ---
            const broadcastForm = document.getElementById('broadcast-form');
            const messageInput = document.getElementById('broadcast-message');
            const sendBtn = document.getElementById('send-broadcast-btn');
            const statusText = document.getElementById('broadcast-status');

            broadcastForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const message = messageInput.value.trim();
                if (!message) {
                    statusText.textContent = "Pesan tidak boleh kosong!";
                    statusText.classList.add('text-rose-400');
                    return;
                }

                sendBtn.disabled = true;
                statusText.textContent = "Mengirim...";
                statusText.classList.remove('text-rose-400', 'text-green-400');
                
                try {
                    const response = await fetch('/api/broadcast', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: message })
                    });

                    if (!response.ok) {
                        throw new Error('Server merespon dengan error.');
                    }

                    const result = await response.json();
                    statusText.textContent = "Broadcast berhasil terkirim!";
                    statusText.classList.add('text-green-400');
                    messageInput.value = ''; // Kosongkan textarea setelah berhasil

                } catch (error) {
                    console.error('Gagal mengirim broadcast:', error);
                    statusText.textContent = "Gagal mengirim broadcast.";
                    statusText.classList.add('text-rose-400');
                } finally {
                    sendBtn.disabled = false;
                    setTimeout(() => { statusText.textContent = ''; }, 4000); // Hilangkan status setelah 4 detik
                }
            });
        });
    </script>
</body>
</html>
